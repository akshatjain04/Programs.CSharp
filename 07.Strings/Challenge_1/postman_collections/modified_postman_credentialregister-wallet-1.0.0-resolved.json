{
  "item": [
    {
      "id": "09a4e61a-482a-41ea-88c6-d725e50168b5",
      "name": "accounts",
      "item": [
        null,
        null
      ],
      "event": []
    },
    null,
    null,
    {
      "id": "db41f4ad-6f1d-4141-96cf-fcb8be2dd527",
      "name": "me",
      "item": [
        null,
        null
      ],
      "event": []
    },
    {
      "id": "f1a9fc2c-3db5-4510-9239-d7e68ffe326d",
      "name": "credentials",
      "item": [
        {
          "id": "e1021f72-f0c2-4d18-aeb6-99502bff579f",
          "name": "All credentials in my Wallet",
          "request": {
            "name": "All credentials in my Wallet",
            "description": {},
            "url": {
              "path": [
                "credentials"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "size",
                  "value": "{{size}}",
                  "description": "Limit the number of results"
                },
                {
                  "disabled": false,
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Offset results"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "f87198bb-4789-4596-acf4-2920029c5f84",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Response record count",
                  "key": "page-size",
                  "value": "{{page-size}}"
                },
                {
                  "disabled": false,
                  "description": "Response record offset",
                  "key": "page-offset",
                  "value": "{{page-offset}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"credentials\": [\n    {\n      \"createdAt\": \"1976-11-14T23:12:52.149Z\",\n      \"credential\": \"nisi qui\",\n      \"format\": \"ldp_vc\",\n      \"id\": \"7746004d-b142-641a-90ab-d23018051696\",\n      \"status\": \"pending\",\n      \"statusUpdatedAt\": \"1987-08-21T01:31:42.647Z\"\n    },\n    {\n      \"createdAt\": \"2016-11-13T20:00:14.095Z\",\n      \"credential\": \"pariatur labore\",\n      \"format\": \"ldp_vc\",\n      \"id\": \"ce238650-9d26-6dba-8721-6c5b48ba41a4\",\n      \"status\": \"suspended\",\n      \"statusUpdatedAt\": \"2013-09-14T18:14:00.685Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "2d859c85-4dda-4af1-a819-191a49661c2a",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "abd67501-84af-4efc-9fdc-df54655854f0",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nTest generated for /credentials?size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(responseData[0], `credentials`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(pm.response.json(), `credentials`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the credentials field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`credentials`);\n          let credentialsArray = _.get(pm.response.json(), `credentials`, \"\");\n          for (let credentials_it = 0; credentials_it < credentialsArray.length; credentials_it++) {\n            let iterator = credentials_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('credentials[${credentials_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'format' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].format`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].format`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].format' has 'format' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].format`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].format`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].format to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].format\", \"\")).to.include.oneOf([\"jwt_vc_json\",\"jwt_vc_json-ld\",\"ldp_vc\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'credential' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].credential`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].credential`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].credential' has 'credential' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].credential`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].credential`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].status`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].status`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].status\", \"\")).to.include.oneOf([\"active\",\"suspended\",\"revoked\",\"expired\",\"pending\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'statusUpdatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].statusUpdatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].statusUpdatedAt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].statusUpdatedAt' has 'statusUpdatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].statusUpdatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].statusUpdatedAt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].statusUpdatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].statusUpdatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].createdAt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].createdAt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "b1474281-ce6f-459f-b294-fa105ad6c43c",
          "name": "{id}",
          "item": [
            {
              "id": "fd9f1027-1bda-4762-9a24-bcfda699be30",
              "name": "One credential from my Wallet",
              "request": {
                "name": "One credential from my Wallet",
                "description": {},
                "url": {
                  "path": [
                    "credentials",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "af07aaa8-6fb8-4d0e-aca6-c45101546656",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"1974-10-01T10:17:33.393Z\",\n  \"credential\": \"exercitation\",\n  \"format\": \"jwt_vc_json\",\n  \"id\": \"urn:uuid:ea1363f6-695d-3eaa-9ce7-30e374696256\",\n  \"status\": \"revoked\",\n  \"statusUpdatedAt\": \"2004-05-03T00:21:10.879Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "ad07f8c9-2e90-4ef4-b4f6-bd50016fd793",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "b3c13cb4-ee64-4859-a7a3-1093b8412408",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nTest generated for /credentials/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(responseData[0], `credentials`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(pm.response.json(), `credentials`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the credentials field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`credentials`);\n          let credentialsArray = _.get(pm.response.json(), `credentials`, \"\");\n          for (let credentials_it = 0; credentials_it < credentialsArray.length; credentials_it++) {\n            let iterator = credentials_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('credentials[${credentials_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'format' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].format`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].format`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].format' has 'format' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].format`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].format`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].format to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].format\", \"\")).to.include.oneOf([\"jwt_vc_json\",\"jwt_vc_json-ld\",\"ldp_vc\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'credential' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].credential`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].credential`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].credential' has 'credential' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].credential`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].credential`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].status`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].status`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].status\", \"\")).to.include.oneOf([\"active\",\"suspended\",\"revoked\",\"expired\",\"pending\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'statusUpdatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].statusUpdatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].statusUpdatedAt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].statusUpdatedAt' has 'statusUpdatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].statusUpdatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].statusUpdatedAt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].statusUpdatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].statusUpdatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].createdAt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].createdAt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    null,
    {
      "id": "9fa1f245-cd20-4af0-8fae-8d220a0a3b22",
      "name": "authorizations",
      "item": [
        null,
        null,
        null
      ],
      "event": []
    },
    {
      "id": "873847b5-9a7d-4285-a904-f82acb1ef6fb",
      "name": "apikeys",
      "item": [
        null,
        null,
        null
      ],
      "event": []
    },
    {
      "id": "cccc8881-2782-4e9e-9cef-c59c324111d3",
      "name": "recipients",
      "item": [
        {
          "id": "4beb46a7-f73b-4109-a175-7bb3f9d95c6b",
          "name": "branches",
          "item": [
            {
              "id": "05e02d59-bd2f-47c8-9da4-aa1b8d048537",
              "name": "/recipients/branches",
              "request": {
                "name": "/recipients/branches",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "coc-number",
                      "value": "{{coc-number}}",
                      "description": "Filter the results on the Chamber of Commerce number (Kamer van Koophandel nummer). This could return multiple results, as there could be multiple Branches."
                    },
                    {
                      "disabled": false,
                      "key": "coc-branch-number",
                      "value": "{{coc-branch-number}}",
                      "description": "Filter the results on the Chamber of Commerce Branch number (Kamer van Koophandel vestigingsnummer). This should only return a single result."
                    },
                    {
                      "disabled": false,
                      "key": "trade-name",
                      "value": "{{trade-name}}",
                      "description": "Filter the results on the Tradename of the organization."
                    },
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "307aeadc-afa4-4aad-8064-77370a5b1d5a",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"branches\": [\n    {\n      \"cocBranchNumber\": \"953544906089\",\n      \"cocNumber\": \"97051967\",\n      \"createdAt\": \"1944-10-04T08:36:48.720Z\",\n      \"deregistrationDate\": \"2007-12-09\",\n      \"eoriNumber\": \"NL041603119\",\n      \"id\": \"urn:uuid:d9c18d05-0e79-f210-381c-ea66aa68d3e5\",\n      \"tradeName\": \"qui aute exercitation\",\n      \"tradeNames\": [\n        \"proident Lorem in\",\n        \"veniam est do\"\n      ],\n      \"updatedAt\": \"2019-06-20T11:55:57.020Z\",\n      \"email\": \"\\\"Vvcv\\\"@A9QZu-e.pk.h.qdEFb\",\n      \"phone\": \"velit\"\n    },\n    {\n      \"cocBranchNumber\": \"138675649417\",\n      \"cocNumber\": \"30618028\",\n      \"createdAt\": \"1947-03-19T07:14:05.983Z\",\n      \"deregistrationDate\": \"1945-09-01\",\n      \"eoriNumber\": \"NL829088161\",\n      \"id\": \"urn:uuid:1ed89dbd-62d2-3441-ac67-7615afb781d3\",\n      \"tradeName\": \"aliquip adipisicing sed\",\n      \"tradeNames\": [\n        \"ut mollit sunt\",\n        \"dolore pariatur\"\n      ],\n      \"updatedAt\": \"1973-02-12T09:20:24.132Z\",\n      \"email\": \"\\\"|*F}\\\"@[751.7.071.6]\",\n      \"phone\": \"aliquip\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "0f13cf51-cba0-489a-be92-ea7243ab84d1",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "9386d591-27c9-44ac-bcf8-f73b195c28fa",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nTest generated for /recipients/branches?coc-number=<string>&coc-branch-number=<string>&trade-name=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(responseData[0], `branches`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(pm.response.json(), `branches`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the branches field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`branches`);\n          let branchesArray = _.get(pm.response.json(), `branches`, \"\");\n          for (let branches_it = 0; branches_it < branchesArray.length; branches_it++) {\n            let iterator = branches_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('branches[${branches_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches[${branches_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].email`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].email`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].email`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].email`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches[${branches_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].phone`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].phone`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].phone`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].phone`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocNumber`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocNumber' has 'cocNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocNumber`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocBranchNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocBranchNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocBranchNumber`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocBranchNumber' has 'cocBranchNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocBranchNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocBranchNumber`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'tradeName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeName`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].tradeName`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].tradeName' has 'tradeName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeName`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].tradeName`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeNames`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'eoriNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].eoriNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].eoriNumber`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].eoriNumber' has 'eoriNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].eoriNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].eoriNumber`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'deregistrationDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].deregistrationDate`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].deregistrationDate`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].deregistrationDate' has 'deregistrationDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].deregistrationDate`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].deregistrationDate`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].createdAt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].createdAt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].updatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].updatedAt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].updatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].updatedAt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            null,
            {
              "id": "295dccb4-2d8e-49f3-9f20-66e3cd146373",
              "name": "{id}",
              "item": [
                {
                  "id": "b717a28d-91c5-4129-8105-f6e8459da256",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "a62b459d-4c73-4215-b771-112b26f45e10",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1977-07-03T10:57:15.627Z\",\n  \"deregistrationDate\": \"1945-08-11\",\n  \"eoriNumber\": \"NL488633737\",\n  \"id\": \"b6ed998d-1fac-118b-42a9-c025c1434077\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"non labore occaecat do\",\n    \"voluptate in sed\"\n  ],\n  \"updatedAt\": \"1987-08-10T23:19:44.285Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "36a14c6e-5f5e-4506-896f-e2f0969deb29",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "928a2d9e-11eb-4a1f-9793-841671f115bd",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nTest generated for /recipients/branches/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(responseData[0], `branches`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(pm.response.json(), `branches`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the branches field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`branches`);\n          let branchesArray = _.get(pm.response.json(), `branches`, \"\");\n          for (let branches_it = 0; branches_it < branchesArray.length; branches_it++) {\n            let iterator = branches_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('branches[${branches_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches[${branches_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].email`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].email`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].email`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].email`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches[${branches_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].phone`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].phone`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].phone`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].phone`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocNumber`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocNumber' has 'cocNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocNumber`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocBranchNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocBranchNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocBranchNumber`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocBranchNumber' has 'cocBranchNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocBranchNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocBranchNumber`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'tradeName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeName`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].tradeName`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].tradeName' has 'tradeName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeName`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].tradeName`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeNames`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'eoriNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].eoriNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].eoriNumber`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].eoriNumber' has 'eoriNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].eoriNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].eoriNumber`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'deregistrationDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].deregistrationDate`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].deregistrationDate`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].deregistrationDate' has 'deregistrationDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].deregistrationDate`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].deregistrationDate`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].createdAt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].createdAt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].updatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].updatedAt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].updatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].updatedAt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                null,
                null,
                {
                  "id": "96959601-1b6f-4eaa-a74a-f4727ba6b1c8",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "edcc4b65-7ed9-43bb-961d-c577702d61c1",
                      "name": "/recipients/branches/:id/registrations",
                      "request": {
                        "name": "/recipients/branches/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "6e96f4b5-20d2-43a8-a5bc-d5d8c2179b70",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1989-06-24T08:50:36.946Z\",\n      \"credentialUrl\": \"SCkMa0M3:6!J3!\",\n      \"endDate\": \"1988-03-03\",\n      \"id\": \"urn:uuid:8fe36606-c50f-17b9-3ea1-85638693e447\",\n      \"issuedAt\": \"2008-08-23T17:57:01.955Z\",\n      \"reference\": \"qui\",\n      \"startDate\": \"2007-10-15\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1994-04-09\",\n      \"updatedAt\": \"1970-04-22T14:23:21.349Z\"\n    },\n    {\n      \"createdAt\": \"1998-12-27T07:35:11.831Z\",\n      \"credentialUrl\": \"MA2:aDE\",\n      \"endDate\": \"1979-09-09\",\n      \"id\": \"urn:uuid:da2c666a-8541-6958-120f-ec3ad27f77ec\",\n      \"issuedAt\": \"1999-08-11T15:16:04.154Z\",\n      \"reference\": \"ullamco ut elit\",\n      \"startDate\": \"2004-03-23\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1979-04-23\",\n      \"updatedAt\": \"1948-08-22T11:40:57.626Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "9fb833f3-168e-4d5c-bcea-1af12175d454",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "28bcfbdc-daad-414a-917a-a2f229fe96d1",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nTest generated for /recipients/branches/:id/registrations?credential-url=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(responseData[0], `branches`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(pm.response.json(), `branches`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the branches field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`branches`);\n          let branchesArray = _.get(pm.response.json(), `branches`, \"\");\n          for (let branches_it = 0; branches_it < branchesArray.length; branches_it++) {\n            let iterator = branches_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('branches[${branches_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches[${branches_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].email`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].email`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].email`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].email`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches[${branches_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].phone`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].phone`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].phone`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].phone`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocNumber`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocNumber' has 'cocNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocNumber`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocBranchNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocBranchNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocBranchNumber`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocBranchNumber' has 'cocBranchNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocBranchNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocBranchNumber`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'tradeName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeName`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].tradeName`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].tradeName' has 'tradeName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeName`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].tradeName`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeNames`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'eoriNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].eoriNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].eoriNumber`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].eoriNumber' has 'eoriNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].eoriNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].eoriNumber`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'deregistrationDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].deregistrationDate`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].deregistrationDate`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].deregistrationDate' has 'deregistrationDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].deregistrationDate`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].deregistrationDate`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].createdAt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].createdAt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].updatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].updatedAt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].updatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].updatedAt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "62d15a2a-d0d8-4978-91f3-6c55a4f85dec",
          "name": "persons",
          "item": [
            {
              "id": "cbf6e438-6e07-4b13-b22d-c930b1173791",
              "name": "/recipients/persons",
              "request": {
                "name": "/recipients/persons",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "persons"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    },
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}",
                      "description": "Filter results based on Person's name"
                    },
                    {
                      "disabled": false,
                      "key": "birth-date",
                      "value": "{{birth-date}}",
                      "description": "Filter results based on birth date"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "ca149beb-f5bb-48a4-af2d-061e1e7ee19a",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"persons\": [\n    {\n      \"birthDate\": \"1992-11-20\",\n      \"birthPlace\": \"L .p ,'p.,Lp., --. }.{{ }- ,-p'''L{L},\",\n      \"countryCode\": \"KJ\",\n      \"createdAt\": \"1989-07-03T08:00:54.690Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \"{-'{ -{'{L{p'{'L} . .'L}L--p\",\n      \"houseNumber\": \"364645\",\n      \"houseNumberPostfix\": \"ioEuZaS.OyDkDyE\",\n      \"id\": \"urn:uuid:53266213-fe69-2206-6202-28b32c3b0462\",\n      \"initials\": \"NKR\",\n      \"lastName\": \"'L.p  L.}.p {{.{ .-.'\",\n      \"middleName\": \"..-{}}L \",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"2215BD\",\n      \"reference\": \"irure dolore quis mollit Ut\",\n      \"updatedAt\": \"1946-07-07T15:39:44.250Z\"\n    },\n    {\n      \"birthDate\": \"2018-10-09\",\n      \"birthPlace\": \"p, L{,-,}{.p{.Lp, ..L,.' {.{,p }{L,. L-}L.. -.'-.L,'{}-L ,,{p,,'}-}L. {'',{-}LL}-L}}'.'}.Lp{p{,.}.\",\n      \"countryCode\": \"PO\",\n      \"createdAt\": \"1963-05-01T05:09:46.813Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \"p..-\",\n      \"houseNumber\": \"7711\",\n      \"houseNumberPostfix\": \"PYiOSVr,SoivXUmvN\",\n      \"id\": \"5148674d-e82f-21a3-ff13-2325e581eea1\",\n      \"initials\": \"WZNPNP\",\n      \"lastName\": \"-{. {. p}.p-p }L.{..pL-L''LL 'L'}.L\",\n      \"middleName\": \".L-pp.-' {{\",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"9129\",\n      \"reference\": \"incididunt voluptate veniam anim\",\n      \"updatedAt\": \"2001-11-15T13:16:57.684Z\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "fbe22d70-5759-4f5e-ba3e-eb8a136ba416",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "46e045b0-7eeb-4c23-8b2e-37e219abe074",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nTest generated for /recipients/persons?size=<integer>&offset=<integer>&name=<string>&birth-date=<date> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(responseData[0], `persons`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(pm.response.json(), `persons`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the persons field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`persons`);\n          let personsArray = _.get(pm.response.json(), `persons`, \"\");\n          for (let persons_it = 0; persons_it < personsArray.length; persons_it++) {\n            let iterator = persons_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('persons[${persons_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons[${persons_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'initials' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].initials`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].initials`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].initials' has 'initials' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].initials`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].initials`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'firstName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].firstName`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].firstName`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].firstName' has 'firstName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].firstName`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].firstName`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'middleName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].middleName`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].middleName`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].middleName' has 'middleName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].middleName`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].middleName`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'lastName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].lastName`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].lastName`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].lastName' has 'lastName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].lastName`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].lastName`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthDate`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthDate`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthDate' has 'birthDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthDate`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthDate`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthPlace' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthPlace`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthPlace`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthPlace' has 'birthPlace' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthPlace`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthPlace`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].phone`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].phone`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].phone`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].phone`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].email`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].email`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].email`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].email`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons[${persons_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'postalCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].postalCode`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].postalCode`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].postalCode' has 'postalCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].postalCode`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].postalCode`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumber`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumber' has 'houseNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumber`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumberPostfix' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumberPostfix`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumberPostfix`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumberPostfix' has 'houseNumberPostfix' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumberPostfix`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumberPostfix`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'countryCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].countryCode`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].countryCode`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].countryCode' has 'countryCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].countryCode`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].countryCode`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].reference`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].reference`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].reference`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].reference`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('persons[${persons_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons[${persons_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].createdAt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].createdAt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].updatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].updatedAt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].updatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].updatedAt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            null,
            {
              "id": "2c74be85-b555-4d6e-b9db-17605f6d02e8",
              "name": "{id}",
              "item": [
                {
                  "id": "4b527035-080f-49f4-9109-f81818037dcb",
                  "name": "/recipients/persons/:id",
                  "request": {
                    "name": "/recipients/persons/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "2df75afe-6f12-488b-8190-2bccb9c43350",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"1994-08-04T06:52:46.251Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"urn:uuid:c636119b-f91b-560e-6479-d68e1631e998\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"1996-07-04T10:07:29.135Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "a14414f9-9f86-473d-8d82-6581f2b59433",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "c683c921-9f69-4fca-ac4b-d0fd7baad839",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nTest generated for /recipients/persons/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(responseData[0], `persons`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(pm.response.json(), `persons`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the persons field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`persons`);\n          let personsArray = _.get(pm.response.json(), `persons`, \"\");\n          for (let persons_it = 0; persons_it < personsArray.length; persons_it++) {\n            let iterator = persons_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('persons[${persons_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons[${persons_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'initials' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].initials`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].initials`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].initials' has 'initials' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].initials`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].initials`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'firstName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].firstName`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].firstName`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].firstName' has 'firstName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].firstName`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].firstName`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'middleName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].middleName`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].middleName`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].middleName' has 'middleName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].middleName`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].middleName`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'lastName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].lastName`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].lastName`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].lastName' has 'lastName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].lastName`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].lastName`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthDate`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthDate`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthDate' has 'birthDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthDate`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthDate`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthPlace' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthPlace`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthPlace`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthPlace' has 'birthPlace' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthPlace`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthPlace`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].phone`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].phone`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].phone`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].phone`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].email`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].email`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].email`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].email`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons[${persons_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'postalCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].postalCode`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].postalCode`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].postalCode' has 'postalCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].postalCode`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].postalCode`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumber`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumber' has 'houseNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumber`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumberPostfix' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumberPostfix`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumberPostfix`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumberPostfix' has 'houseNumberPostfix' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumberPostfix`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumberPostfix`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'countryCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].countryCode`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].countryCode`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].countryCode' has 'countryCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].countryCode`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].countryCode`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].reference`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].reference`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].reference`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].reference`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('persons[${persons_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons[${persons_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].createdAt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].createdAt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].updatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].updatedAt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].updatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].updatedAt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                null,
                null,
                {
                  "id": "a3ef390d-b2fe-4b2b-bd22-1ed6b24615aa",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "77dd384d-1360-4aee-868a-8974ea1ed9d8",
                      "name": "/recipients/persons/:id/registrations",
                      "request": {
                        "name": "/recipients/persons/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "7805119f-74ea-41d3-ba04-19deb10dc256",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"2000-10-11T00:54:33.366Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:ae0aa6ba-9417-dffb-1c76-944a0a7010d7\",\n      \"issuedAt\": \"1966-08-16T12:21:59.511Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1944-05-06\",\n      \"updatedAt\": \"1975-04-07T13:40:43.040Z\"\n    },\n    {\n      \"createdAt\": \"1957-07-11T14:12:59.668Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"ac2d429d-bf93-c029-daf4-c7722f4c3f1f\",\n      \"issuedAt\": \"1978-01-22T20:45:57.830Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1998-03-19\",\n      \"updatedAt\": \"2004-07-25T23:07:00.613Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "5b4c1f41-a4f6-4ca1-ad6f-11eb929a1dcb",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "6a741dea-c602-430e-b580-c5887097a22d",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nTest generated for /recipients/persons/:id/registrations?credential-url=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(responseData[0], `persons`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(pm.response.json(), `persons`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the persons field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`persons`);\n          let personsArray = _.get(pm.response.json(), `persons`, \"\");\n          for (let persons_it = 0; persons_it < personsArray.length; persons_it++) {\n            let iterator = persons_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('persons[${persons_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons[${persons_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'initials' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].initials`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].initials`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].initials' has 'initials' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].initials`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].initials`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'firstName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].firstName`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].firstName`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].firstName' has 'firstName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].firstName`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].firstName`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'middleName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].middleName`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].middleName`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].middleName' has 'middleName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].middleName`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].middleName`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'lastName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].lastName`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].lastName`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].lastName' has 'lastName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].lastName`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].lastName`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthDate`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthDate`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthDate' has 'birthDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthDate`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthDate`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthPlace' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthPlace`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthPlace`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthPlace' has 'birthPlace' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthPlace`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthPlace`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].phone`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].phone`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].phone`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].phone`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].email`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].email`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].email`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].email`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons[${persons_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'postalCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].postalCode`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].postalCode`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].postalCode' has 'postalCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].postalCode`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].postalCode`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumber`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumber' has 'houseNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumber`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumberPostfix' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumberPostfix`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumberPostfix`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumberPostfix' has 'houseNumberPostfix' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumberPostfix`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumberPostfix`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'countryCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].countryCode`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].countryCode`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].countryCode' has 'countryCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].countryCode`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].countryCode`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].reference`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].reference`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].reference`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].reference`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('persons[${persons_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons[${persons_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].createdAt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].createdAt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].updatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].updatedAt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].updatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].updatedAt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "662f069f-7dad-481c-9161-e60ca3a6cacc",
      "name": "registrations",
      "item": [
        null,
        {
          "id": "ee9b7e7d-e694-4df9-9d53-298fedd9b683",
          "name": "{id}",
          "item": [
            null,
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    null,
    null
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://virtserver.swaggerhub.com/credentialregister/wallet/1.0.0",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "3d008197-fb78-4245-9bcb-0448d79bdfa3",
    "name": "Wallet API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "The Wallet API of the Credential Register.",
      "type": "text/plain"
    }
  }
}